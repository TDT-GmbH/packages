#!/bin/sh
#
# Copyright (C) 2021 TDT AG <development@tdt.de>
#
# This is free software, licensed under the GNU General Public License v2.
# See https://www.gnu.org/licenses/gpl-2.0.txt for more information.
#

. /usr/share/libubox/jshn.sh

MESSAGE_DIR="/tmp/notification/messages.d"

get_uuid() {
	local file="$1"
	local uuid

	uuid="${file##*/}"

	echo "${uuid%*.json}"
}

gen_uuid() {
	local uuid

	uuid="$(cat /proc/sys/kernel/random/uuid)"
	echo "$uuid"
}

list() {
	json_init

	json_add_object "add"
	json_add_string "service"
	json_add_string "title"
	json_add_string "message"
	json_close_object

	json_add_object "remove"
	json_add_string "uuid"
	json_close_object

	json_add_object "list"
	json_close_object

	json_add_object "flush"
	json_close_object

	json_dump
}

notification_add() {
	local service="$1"
	local title="$2"
	local message="$3"

	local timestamp uuid

	local code=-1
	local msg="Unable to add notification"

	timestamp="$(date +%s)"

	uuid="$(gen_uuid)"
	if [ -z "$uuid" ]; then
		json_init
		json_add_int "code" "-2"
		json_add_string "message" "Unable to get uuid"
		json_dump
		return
	fi

	json_init
	json_add_string service "$service"
	json_add_string title "$title"
	json_add_string message "$message"
	json_add_int timestamp "$timestamp"
	json_dump > "${MESSAGE_DIR}/${uuid}.json"

	if [ -f "${MESSAGE_DIR}/${uuid}.json" ]; then
		code=0
		msg="Notification added"
	fi

	json_init
	json_add_int "code" "$code"
	json_add_string "message" "$msg"
	json_dump
}

notification_remove() {
	local uuid="$1"

	local code=-1
	local msg="Notification not found"


	if [ -f "${MESSAGE_DIR}/${uuid}.json" ]; then
		rm "${MESSAGE_DIR}/${uuid}.json"
		code=0
		msg="Notication removed"
	fi

	json_init
	json_add_int "code" "$code"
	json_add_string "message" "$msg"
	json_dump
}

notification_list() {
	local uuid service title message timestamp

	json_init
	json_add_array "messages"
	if [ ! -z "$(ls -A "$MESSAGE_DIR")" ]; then
		for entry in $(ls -t ${MESSAGE_DIR}/*.json); do
			uuid="$(get_uuid "$entry")"

			json_set_namespace dump old_cb
			json_load_file "$entry"
			json_get_vars service title message timestamp
			json_cleanup
			json_set_namespace "$old_cb"

			json_add_object ""
			json_add_string uuid "$uuid"
			json_add_string service "$service"
			json_add_string title "$title"
			json_add_string message "$message"
			json_add_int timestamp "$timestamp"
			json_close_object
		done
	fi
	json_close_array
	json_dump
}

notification_flush() {
	local code=0
	local msg="All notifications flushed"

	rm "$MESSAGE_DIR"/*.json

	json_init
	json_add_int "code" "$code"
	json_add_string "message" "$msg"
	json_dump
}

call() {
	local method="$1"

	local service title message uuid

	case "$method" in
		add)
			read -r input;
			json_load "${input}"
			json_get_var service service
			json_get_var title title
			json_get_var message message
			notification_add "$service" "$title" "$message"
		;;
		remove)
			read -r input;
			json_load "${input}"
			json_get_var uuid uuid
			notification_remove "$uuid"
		;;
		list)
			notification_list
		;;
		flush)
			notification_flush
		;;
	esac
}

main() {
	local path="$1"
	local method="$2"

	mkdir -p "${MESSAGE_DIR}"

	case "$path" in
		list)
			list
		;;
		call)
			call "$method"
		;;
	esac
}

main "$@"
